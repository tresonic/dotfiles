#!/usr/bin/env bash

set -e

APPIMAGE_DIR="$HOME/Applications"
APPIMAGE_ICON_DIR="$APPIMAGE_DIR/icons"
DESKTOP_DIR="$HOME/.local/share/applications"
DESKTOP_TAG="AppImageSync"

mkdir -p "$DESKTOP_DIR"
mkdir -p "$APPIMAGE_ICON_DIR"

# Handle --clean option
if [[ "$1" == "--clean" ]]; then
    echo "Cleaning all .desktop files created by this script..."
    for desktop in "$DESKTOP_DIR"/*.desktop; do
        if grep -q "X-AppImage-Sync=$DESKTOP_TAG" "$desktop"; then
            rm -f "$desktop"
            echo "Removed: $desktop"
        fi
    done
    echo "Cleanup complete."
    exit 0
fi

# Check dependencies
if ! command -v 7z &>/dev/null; then
    echo "Error: 7z not found. Install p7zip-full or p7zip."
    exit 1
fi

declare -A valid_apps

for appimage in "$APPIMAGE_DIR"/*.AppImage; do
    [ -e "$appimage" ] || continue

    echo "Processing: $appimage"
    chmod +x "$appimage"

    filename=$(basename "$appimage")
    tmpdir=$(mktemp -d)
    cd "$tmpdir" || continue

    extracted_with_7z=true

    # Try extracting .desktop file using 7z
    if ! 7z e "$appimage" -aoa -y -r -o"$tmpdir" "*.desktop" &>/dev/null; then
        echo "7z failed, falling back to --appimage-extract"
        extracted_with_7z=false
        "$appimage" --appimage-extract &>/dev/null || {
            echo "Failed to extract with --appimage-extract: $filename"
            cd /
            rm -rf "$tmpdir"
            continue
        }
        cd squashfs-root || continue
    fi

    desktop_file=$(find . -name '*.desktop' | head -n 1)
    if [ -z "$desktop_file" ]; then
        echo "No .desktop file found in $filename"
        cd /
        rm -rf "$tmpdir"
        continue
    fi

    name=$(grep -m 1 "^Name=" "$desktop_file" | cut -d= -f2-)
    exec_command=$(grep -m 1 "^Exec=" "$desktop_file" | cut -d= -f2-)
    icon_name=$(grep -m 1 "^Icon=" "$desktop_file" | cut -d= -f2-)
    categories=$(grep -m 1 "^Categories=" "$desktop_file" | cut -d= -f2-)

    [ -z "$name" ] && name=$(basename "$appimage" .AppImage)
    [ -z "$exec_command" ] && exec_command="$appimage"

    # Icon extraction (works both for 7z and fallback)
    icon_path=""
    if [ -n "$icon_name" ]; then
        if $extracted_with_7z; then
            icon_file_path=$(7z l "$appimage" | awk '{print $NF}' | grep -i "/$icon_name.png$" | head -n 1)
            if [ -n "$icon_file_path" ]; then
                7z e "$appimage" "$icon_file_path" -aoa -y -o"$tmpdir" &>/dev/null
                if [ -f "$(basename "$icon_file_path")" ]; then
                    icon_path="$APPIMAGE_ICON_DIR/$icon_name.png"
                    cp "$(basename "$icon_file_path")" "$icon_path"
                fi
            fi
        else
            icon_file=$(find . -iname "$icon_name.png" | head -n 1)
            if [ -f "$icon_file" ]; then
                icon_path="$APPIMAGE_ICON_DIR/$icon_name.png"
                cp "$icon_file" "$icon_path"
            fi
        fi
    fi

    desktop_target="$DESKTOP_DIR/${name// /_}.desktop"
    valid_apps["$desktop_target"]=1

    cat > "$desktop_target" <<EOF
[Desktop Entry]
Name=$name
Exec=$appimage
Icon=$icon_path
Type=Application
Terminal=false
Categories=${categories:-Utility};
X-AppImage-Sync=$DESKTOP_TAG
EOF

    echo "Created or updated: $desktop_target"

    cd /
    rm -rf "$tmpdir"
done

# Remove orphaned .desktop files
for desktop in "$DESKTOP_DIR"/*.desktop; do
    if grep -q "X-AppImage-Sync=$DESKTOP_TAG" "$desktop"; then
        if [ -z "${valid_apps["$desktop"]}" ]; then
            rm -f "$desktop"
            echo "Removed orphaned: $desktop"
        fi
    fi
done

echo "Done syncing AppImages."
